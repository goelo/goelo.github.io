---
layout: post
title: Teach Yourself Programming in Ten Years
date: 2018-03-15 20:36:00
author: Morgan
tags: 
    - Self-learning
header-img: "img/go-bg.jpg"
catalog: true
---

> Peter Norvig’s classic essay remains one of the most honest takes on what it takes to become a great programmer. Here is the essence in English so we can revisit it any time.

Peter Norvig—Director of Research at Google, co-author of *Artificial Intelligence: A Modern Approach*, and long-time teacher on Udacity—argues that true mastery can’t be rushed. Forget promises like “Learn Java in 24 Hours.” They give you syntax, not skill, and they rarely change the way you think.

### Why the rush?

Bookstores overflow with titles like “Teach Yourself C++ in 24 Hours.” A quick search on Amazon returns hundreds of similar promises. The implication is that programming is either easy or something we can bolt onto our résumés in a weekend. Reality disagrees.

- **“Learn”**: In 24 hours you won’t build a meaningful project, learn from production bugs, or collaborate with seasoned engineers. At best you gain a superficial overview.
- **“C++”**: Picking up the syntax of a second language is one thing; writing idiomatic, efficient C++ is another. Without a mindset shift you’ll simply write BASIC with angle brackets.
- **“24 hours”**: Mastery takes far more time—years in fact.

### The ten-year rule

Studies by Bloom, Bryan & Harter, Hayes, Simon & Chase, and others show that excellence in chess, composition, telegraphy, painting, piano, swimming, or tennis requires roughly **ten years of deliberate practice**. The same holds true for programming. There is no shortcut; you must repeatedly stretch beyond your comfort zone, analyse your performance, and correct mistakes.

Practical recommendations:

1. **Create opportunities for deep practice.** Build real systems, debug them, and iterate.
2. **Work with mentors.** Learn from people who can critique your thinking.
3. **Surround yourself with peers.** Great engineers sharpen one another.

Even supposedly “innate” ability blossoms only after long, focused effort. Talent matters, but sustained, fearless practice matters more.

### Keep reading, but build more

Books are invaluable, but they can’t replace experience. When my first child was born I read every parenting guide I could find; by the second, personal experience mattered far more. Programming is similar: manuals help, but nothing rivals years of building, shipping, and reflecting.

### Choosing a first language

Norvig suggests a few principles for newcomers:

- **Follow the community.** Use what your friends and mentors use so you can ask questions and share code.
- **Favour simplicity.** Languages like Python or Scheme let you focus on concepts instead of boilerplate.
- **Prefer interactive feedback.** Instant results reinforce learning, just as pressing a piano key and hearing a note does.

Python, Scheme, and JavaScript all fit the bill thanks to thriving ecosystems, interactive shells, and beginner-friendly resources. Younger learners might enjoy Alice, Squeak, or Blockly.

### Recommended resources

- *Structure and Interpretation of Computer Programs* (Abelson & Sussman) — still the gold standard for learning to think like a computer scientist.
- *How to Design Programs* (Felleisen et al.) — a more guided path for designing elegant solutions.
- *Python Programming: An Introduction to Computer Science* (Zelle) — a gentle Python primer.
- [Python.org](https://python.org/) — host to excellent beginner tutorials.
- *Concepts, Techniques, and Models of Computer Programming* (Van Roy & Haridi) — a modern survey of language paradigms.

### Final thought

By all means, buy the “Learn X” book if it helps you get started. Just don’t mistake exposure for expertise. Try investing 24 months of consistent effort instead of 24 hours. If you can stick with deliberate practice for a decade, you’re truly on your way.
